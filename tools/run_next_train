#!/bin/bash
embed() { sed -e 's/ \{1,\}$/ \\/'; }

HELPMSG=$(embed <<EOF
-------------------------------------------------------------------------------------------
Usage: The following example will not run command (-c) in specified working directory (-d)
on CUDA_VISIBLE_DEVICES (-g) until program with PID (-p) is dead (gpustat -p will tell you
the PID). Multiple run can be specified (-t, space seperated) so that the command (-c) will
 be executed multiple times, each time with corresponding \$TASK environment being set.

run_next_train 
-d /home/usr/src/myproject/work_dir 
-c 'python main.py --task \$TASK | tee logs/\$TASK.log' 
-t 'task1 task2 task3' 
-p9999 -g0,1,2,3
-------------------------------------------------------------------------------------------
EOF
)

while getopts g:bp:c:d:ht: flag
do
    case "${flag}" in
        g) export CUDA_VISIBLE_DEVICES=${OPTARG};;
        b) export CUDA_LAUNCH_BLOCKING=1;;
        t) TASKS=${OPTARG};;
        p) PID=${OPTARG};;
        d) DIR=${OPTARG};;
        c) CMD=${OPTARG};;
        h) printf "%s\n" "$HELPMSG" && exit;;
        *) echo "unsupported flag ${flag}";;
    esac
done

echo "CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES"
echo "CUDA_LAUNCH_BLOCKING=$CUDA_LAUNCH_BLOCKING"
echo "PID=$PID"
echo "TASKS=$TASKS"


if [ -n "$PID" ]; then
  if ps -p "$PID" >/dev/null; then
    echo "WAITING FOR $PID TO FINISH..."
    sleep 30
  else
    echo "$PID NOT LIVE."
  fi
fi

if [ -z "$TASKS" ] || [ -z "$CMD" ] || [ -z "$DIR" ]; then
  echo "NO CMD OR DIR SPECIFIED. WILL EXIT."
  printf "%s\n" "$HELPMSG"
  exit
fi

cd "$DIR" || (echo "\`cd $DIR\` FAILED."; exit)

if [ -n "$PID" ]; then
  while ps -p "$PID" >/dev/null; do
    sleep 30
  done
  echo "$PID FINISHED."
fi

echo "WILL RUN NEXT TRAINING SCHEDULES."
for TASK in "${TASKS[@]}"; do
  echo "======================================================"
  echo "$TASK"
  echo "======================================================"
  eval "TASK=$TASK $CMD"
done